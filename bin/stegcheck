#!/bin/bash -i
# StegCheck - Steganography Analyzer Wrapper
[ $# -lt 1 ] && { echo "Usage: $0 <image_file> [wordlist]"; exit 1; }
IMG=$1
WL=${2:-"/usr/share/dict/rockyou.txt"}
OUT="steg_$(basename "$IMG")"
[ ! -f "$IMG" ] && { echo "Error: Image not found"; exit 1; }
mkdir -p "$OUT"
FOUND_DATA=0
log_success() { FOUND_DATA=1; }
if [ -t 1 ]; then
  BLUE=$(tput setaf 4); GREEN=$(tput setaf 2); RED=$(tput setaf 1); YELLOW=$(tput setaf 3); RESET=$(tput sgr0)
else
  BLUE=""; GREEN=""; RED=""; YELLOW=""; RESET=""
fi
header() { echo "${BLUE}[+] $1${RESET}"; }
success() { echo "${GREEN}[+] $1${RESET}"; }
warning() { echo "${YELLOW}[!] $1${RESET}"; }
error() { echo "${RED}[-] $1${RESET}"; }

header "File info:"
file "$IMG"
file -i "$IMG"
header "Basic metadata:"
stat "$IMG"

header "Searching for hidden text:"
FLAG_TEXT=$(strings -n 4 "$IMG" | grep -i -E "(flag|ctf|key|pass|secret|cred|admin|login|user|hash|pico|\{|\})" 2>/dev/null)
if [ -n "$FLAG_TEXT" ]; then 
    success "Found potentially interesting text:"
    echo "$FLAG_TEXT" | grep --color=always -i -E "(flag|ctf|key|pass|secret|cred|admin|login|user|hash|pico|\{.*\})"
    log_success
fi

BRACES=$(strings "$IMG" | grep -E "\{[a-zA-Z0-9_]{3,}\}" 2>/dev/null)
if [ -n "$BRACES" ]; then
    success "Found data in curly braces:"
    echo "$BRACES"
    log_success
fi

BASE64_DATA=$(strings "$IMG" | grep -E "^[A-Za-z0-9+/]{20,}={0,2}$" | head -5 2>/dev/null)
if [ -n "$BASE64_DATA" ]; then
    success "Found potential base64 data:"
    echo "$BASE64_DATA"
    BASE64_DECODED=$(echo "$BASE64_DATA" | base64 -d 2>/dev/null)
    if [ $? -eq 0 ] && [ -n "$BASE64_DECODED" ]; then
        success "Decoded base64:"
        echo "$BASE64_DECODED"
        log_success
    fi
fi

HEX_DATA=$(strings "$IMG" | grep -E "^[0-9a-fA-F]{20,}$" | head -3 2>/dev/null)
if [ -n "$HEX_DATA" ]; then
    success "Found potential hex data:"
    echo "$HEX_DATA"
    HEX_DECODED=$(echo "$HEX_DATA" | xxd -r -p 2>/dev/null | strings)
    if [ $? -eq 0 ] && [ -n "$HEX_DECODED" ]; then
        success "Decoded hex:"
        echo "$HEX_DECODED"
        log_success
    fi
fi

BINARY_DATA=$(strings "$IMG" | grep -E "^[01]{24,}$" | head -3 2>/dev/null)
if [ -n "$BINARY_DATA" ]; then
    success "Found potential binary data:"
    echo "$BINARY_DATA"
    log_success
fi

ROT13_DETECT=$(strings "$IMG" | grep -E "^[A-Za-z]{10,}$" | head -5 | tr 'A-Za-z' 'N-ZA-Mn-za-m' | grep -i -E "(flag|ctf|key|secret)" 2>/dev/null)
if [ -n "$ROT13_DETECT" ]; then
    success "Found potential ROT13 encoded data:"
    echo "$ROT13_DETECT"
    log_success
fi

header "First 256 bytes:"
hexdump -C "$IMG" | head -8

header "Last 256 bytes (often used to hide data):"
hexdump -C "$IMG" | tail -8

if [ $FOUND_DATA -eq 0 ]; then
    echo "    No obvious hidden text found, showing filtered strings:"
    strings -n 6 "$IMG" | grep -v -E "^(.)\1{5,}$" | grep -v -E "^(.{1,2})\1{3,}$" | 
    grep -E "[a-zA-Z]{3,}[a-zA-Z0-9]{3,}" | grep -v -E "(IDAT|IHDR|IEND|sRGB|gAMA|pHYs|cHRM|bKGD|tRNS|tEXt|zTXt|time|date|chunk|XML|Adobe)" | head -15
fi

if command -v exiftool &>/dev/null; then
    EXIF_DATA=$(exiftool "$IMG" | grep -v "File Name\|Directory\|File Size\|File Permissions")
    if [ -n "$EXIF_DATA" ]; then 
        header "EXIF metadata:"
        echo "$EXIF_DATA"
        EXIF_COMMENTS=$(echo "$EXIF_DATA" | grep -E "(Comment|Description|Author|User|Title|Subject)" | grep -v "ExifTool")
        if [ -n "$EXIF_COMMENTS" ]; then
            success "Interesting EXIF fields found:"
            echo "$EXIF_COMMENTS"
            log_success
        fi
    fi
    exiftool -a -u -g1 "$IMG" > "$OUT/exiftool_full.txt"
fi

if command -v binwalk &>/dev/null; then
    header "Binwalk scan:"
    BINWALK_OUT=$(binwalk "$IMG")
    echo "$BINWALK_OUT" | head -n 3
    EMBEDDED=$(echo "$BINWALK_OUT" | grep -v "Analyzed" | grep -v "DECIMAL" | grep -v "-" | wc -l)
    if [ $EMBEDDED -gt 1 ]; then
        echo "    Found $EMBEDDED embedded files/signatures"
        echo "$BINWALK_OUT" | grep -v "Analyzed" | grep -v "DECIMAL" | grep -v "-"
        binwalk -e -C "$OUT/binwalk" "$IMG" &>/dev/null
        log_success
    fi
    binwalk --dd='.*' -C "$OUT/binwalk_all" "$IMG" &>/dev/null
fi

header "Extraction methods:"

if command -v steghide &>/dev/null; then
    STEGHIDE_INFO=$(steghide info "$IMG" 2>&1)
    if ! echo "$STEGHIDE_INFO" | grep -q "is not supported"; then
        header "Steghide info:"
        echo "$STEGHIDE_INFO" | grep -v "trying to get info"
        if echo "$STEGHIDE_INFO" | grep -q "embedded"; then
            for p in "" "password" "123456" "admin" "steghide" "hidden" "secret" "steg" "stegano" "passphrase" "pass" "letmein"; do
                if steghide extract -sf "$IMG" -p "$p" -xf "$OUT/steghide.txt" &>/dev/null; then
                    success "Steghide: password found: '$p'"
                    cat "$OUT/steghide.txt"
                    log_success
                    break
                fi
            done
            if [ $FOUND_DATA -eq 0 ] && [ -f "$WL" ]; then
                header "Trying passwords from rockyou.txt..."
                for p in $(head -3000 "$WL"); do
                    if steghide extract -sf "$IMG" -p "$p" -xf "$OUT/steghide.txt" &>/dev/null; then
                        success "Steghide: password found: '$p'"
                        cat "$OUT/steghide.txt"
                        log_success
                        break
                    fi
                done
            fi
        fi
    fi
fi

if command -v stegseek &>/dev/null && [ -f "$WL" ] && command -v steghide &>/dev/null; then
    if steghide info "$IMG" 2>&1 | grep -q "capacity" && ! steghide info "$IMG" 2>&1 | grep -q "is not supported"; then
        header "Running stegseek with rockyou.txt wordlist..."
        STEGSEEK_OUT=$(timeout 60s stegseek "$IMG" "$WL" "$OUT/stegseek.txt" 2>&1 || true)
        if echo "$STEGSEEK_OUT" | grep -q "Found"; then
            success "Stegseek found data:"
            echo "$STEGSEEK_OUT" | grep -E "Found|Extracting" 
            if [ -f "$OUT/stegseek.txt" ]; then
                cat "$OUT/stegseek.txt"
                log_success
            fi
        fi
    fi
fi

if command -v outguess &>/dev/null; then
    outguess -r "$IMG" "$OUT/outguess.txt" 2>/dev/null
    if [ -s "$OUT/outguess.txt" ]; then
        success "Outguess found data:"
        cat "$OUT/outguess.txt"
        log_success
    fi
fi

if command -v stepic &>/dev/null; then
    STEPIC_OUT=$(stepic -d -i "$IMG" 2>/dev/null)
    if [ -n "$STEPIC_OUT" ]; then
        success "Stepic found data:"
        echo "$STEPIC_OUT"
        echo "$STEPIC_OUT" > "$OUT/stepic.txt"
        log_success
    fi
fi

if [[ "$IMG" == *".png" || "$IMG" == *".bmp" ]] && command -v zsteg &>/dev/null; then
    header "Running zsteg..."
    ZSTEG_OUT=$(timeout 30s zsteg -a "$IMG" 2>/dev/null || true)
    if [ $? -eq 0 ] && [ -n "$ZSTEG_OUT" ] && ! echo "$ZSTEG_OUT" | grep -q "nothing"; then
        success "Zsteg found data:"
        echo "$ZSTEG_OUT" | grep -v "^extradata:" | grep -v "^imagedata:" | grep -v "^.\{1,5\}:.\{1,5\}: \.\.\." | grep -v "00000000: 00 00 00"
        log_success
        if echo "$ZSTEG_OUT" | grep -q -i -E "(flag|ctf|pass|key|secret)"; then
            success "Potentially interesting zsteg findings:"
            echo "$ZSTEG_OUT" | grep -i -E "(flag|ctf|pass|key|secret)"
        fi
    fi
    timeout 15s zsteg --all -E "$IMG" -o "$OUT/zsteg_extract.bin" 2>/dev/null || true
fi

if command -v foremost &>/dev/null; then
    header "Running foremost..."
    foremost -i "$IMG" -o "$OUT/foremost" &>/dev/null
    CARVED_FILES=$(find "$OUT/foremost" -type f -not -name "audit.txt" 2>/dev/null | wc -l)
    if [ -d "$OUT/foremost" ] && [ "$CARVED_FILES" -gt 0 ]; then
        success "Foremost carved files:"
        grep -i "FILE" "$OUT/foremost/audit.txt" 2>/dev/null
        find "$OUT/foremost" -type f -not -name "audit.txt" 2>/dev/null | while read file; do
            echo "    $(basename "$file") ($(file --brief "$file" 2>/dev/null))"
        done
        log_success
    fi
fi

if [[ "$IMG" == *".png" ]] && command -v pngcheck &>/dev/null; then
    header "PNG chunk analysis:"
    pngcheck -vtp7f "$IMG"
fi

if command -v stegoveritas &>/dev/null; then
    header "Running StegOveritas (comprehensive analysis)..."
    timeout 120s stegoveritas -out "$OUT/stegoveritas" -meta -imageTransform -colorMap -trailing -steghide "$IMG" &>/dev/null || true
    if [ -d "$OUT/stegoveritas" ]; then
        success "StegOveritas scan complete - check $OUT/stegoveritas"
        RESULTS=$(find "$OUT/stegoveritas" -type f -not -name "*.png" -not -name "*.bmp" -not -name "*.jpg" | wc -l)
        if [ $RESULTS -gt 0 ]; then
            success "Found interesting files in StegOveritas output:"
            find "$OUT/stegoveritas" -type f -not -name "*.png" -not -name "*.bmp" -not -name "*.jpg" | head -10
            log_success
        fi
    fi
fi

if [[ "$IMG" == *".jpg" || "$IMG" == *".jpeg" ]] && command -v jsteg &>/dev/null; then
    header "Running jsteg..."
    JSTEG_OUT=$(jsteg reveal "$IMG" 2>/dev/null)
    if [ $? -eq 0 ] && [ -n "$JSTEG_OUT" ]; then
        success "Jsteg found data:"
        echo "$JSTEG_OUT"
        echo "$JSTEG_OUT" > "$OUT/jsteg.txt"
        log_success
    fi
fi

if [[ "$IMG" == *".pdf" ]] && command -v pdfinfo &>/dev/null; then
    header "PDF analysis:"
    pdfinfo "$IMG"
    pdftotext "$IMG" "$OUT/pdf_text.txt" 2>/dev/null
    if [ -s "$OUT/pdf_text.txt" ]; then
        grep -i -E "(flag|ctf|key|pass|secret|cred|admin|login)" "$OUT/pdf_text.txt" > "$OUT/pdf_interesting.txt"
        if [ -s "$OUT/pdf_interesting.txt" ]; then
            success "Found interesting text in PDF:"
            cat "$OUT/pdf_interesting.txt"
            log_success
        fi
    fi
fi

if [[ "$IMG" == *".gif" ]]; then
    header "GIF analysis:"
    if command -v gifsicle &>/dev/null; then
        FRAMES=$(gifsicle --info "$IMG" 2>/dev/null | grep -c "#")
        success "GIF has $FRAMES frames"
        if [ $FRAMES -gt 1 ]; then
            mkdir -p "$OUT/gif_frames"
            gifsicle --explode --output="$OUT/gif_frames/frame%03d.gif" "$IMG" &>/dev/null
            success "Extracted frames to $OUT/gif_frames/"
        fi
    fi
fi

if [[ "$IMG" == *".wav" || "$IMG" == *".mp3" ]]; then
    header "Audio steganography detection:"
    if command -v sox &>/dev/null; then
        sox "$IMG" -n spectrogram -o "$OUT/spectrogram.png" 2>/dev/null
        success "Generated spectrogram at $OUT/spectrogram.png"
    fi
    if command -v hideme &>/dev/null; then
        hideme extract -i "$IMG" -o "$OUT/hideme" &>/dev/null
        if [ $? -eq 0 ]; then
            success "Hideme extracted data to $OUT/hideme"
            log_success
        fi
    fi
fi

if command -v aperisolve &>/dev/null; then
    header "Running aperisolve..."
    timeout 120s aperisolve "$IMG" -o "$OUT/aperisolve" &>/dev/null || true
    success "Aperisolve complete - check $OUT/aperisolve"
fi

header "Analysis complete. Extracted files in $OUT/"
if [ $FOUND_DATA -eq 1 ]; then 
    success "Data was successfully extracted!"
else
    warning "No obvious hidden data found. Try manual inspection or additional tools."
    if [ ! -f "$WL" ]; then
        warning "rockyou.txt wordlist not found at $WL"
        echo "For password-based steganography, please install the wordlist:"
        echo "Example locations: /usr/share/dict/rockyou.txt or /usr/share/wordlists/rockyou.txt"
    fi
    echo "Consider these additional tools:"
    echo "- Stegsolve (Java-based tool with color filters)"
    echo "- OpenStego (Another steganography tool)"
fi