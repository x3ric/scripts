#!/usr/bin/env python3
# Pcap Analysis Tool
import argparse
import json
import logging
from scapy.all import *
from scapy.utils import PcapReader

class PcapAnalyzer:
    def __init__(self, pcap_file: str, show_tcp_ascii: bool, show_raw: bool):
        self.pcap_file = pcap_file
        self.show_tcp_ascii = show_tcp_ascii
        self.show_raw = show_raw
        self.packet_summaries = []
        self.tcp_streams = {}
        self._analyze()

    def _analyze(self):
        with PcapReader(self.pcap_file) as pcap:
            for pkt in pcap:
                if TCP in pkt:
                    self._handle_tcp_packet(pkt)
                self._analyze_packet(pkt)

    def _analyze_packet(self, pkt):
        idx = pkt.sniffed_on
        time_stamp = "{0:.6f}".format(pkt.time)
        source = destination = protocol = info = ""

        if IP in pkt or IPv6 in pkt:
            ip_layer = pkt.getlayer(IP) or pkt.getlayer(IPv6)
            source = ip_layer.src
            destination = ip_layer.dst
            protocol = ip_layer.name

        if TCP in pkt:
            tcp = pkt[TCP]
            source += f":{tcp.sport}"
            destination += f":{tcp.dport}"
            protocol = "TCP"
            flags = tcp.sprintf("%TCP.flags%")
            info = f"Flags={flags}"

        elif UDP in pkt:
            udp = pkt[UDP]
            source += f":{udp.sport}"
            destination += f":{udp.dport}"
            protocol = "UDP"
        
        elif ICMP in pkt:
            icmp = pkt[ICMP]
            protocol = "ICMP"
            info = f"Type={icmp.type} Code={icmp.code}"

        packet_summary = {'No': idx, 'Time': time_stamp, 'Src': source, 'Dst': destination, 'Proto': protocol, 'Info': info}
        self.packet_summaries.append(packet_summary)

    def _handle_tcp_packet(self, pkt):
        if self.show_tcp_ascii and Raw in pkt:
            tcp = pkt[TCP]
            data = tcp.load.decode(errors='ignore').strip()
            if data:
                print(f"TCP Stream Data: {data}")

    def print_packet_summaries(self):
        for packet in self.packet_summaries:
            if self.show_raw:
                raw_data = packet['Raw'] if 'Raw' in packet else 'No raw data'
                print(f"{packet['No']} {packet['Time']} {packet['Src']} > {packet['Dst']} {packet['Proto']} {packet['Info']} Raw: {raw_data}")
            else:
                print(f"{packet['No']} {packet['Time']} {packet['Src']} > {packet['Dst']} {packet['Proto']} {packet['Info']}")

    def save_json(self, filename: str):
        with open(filename, 'w') as f:
            json.dump(self.packet_summaries, f, indent=2)
        print(f"\nPacket summaries saved to {filename}")

def main():
    parser = argparse.ArgumentParser(description='PCAP Analysis Tool')
    parser.add_argument('pcap_file', help='Path to PCAP file')
    parser.add_argument('-a', '--ascii', action='store_true', help='Show ASCII output for TCP streams')
    parser.add_argument('-r', '--raw', action='store_true', help='Show raw data in packet summaries')
    parser.add_argument('-j', '--json', action='store_true', help='Print packet summaries as JSON')
    parser.add_argument('-s', '--save', help='Save packet summaries to JSON file')
    args = parser.parse_args()

    try:
        analyzer = PcapAnalyzer(args.pcap_file, args.ascii, args.raw)
        if args.json:
            print(json.dumps(analyzer.packet_summaries, indent=2))
        elif args.save:
            analyzer.save_json(args.save)
        else:
            analyzer.print_packet_summaries()

    except Exception as e:
        logging.error(f"Analysis failed: {str(e)}")

if __name__ == "__main__":
    main()
