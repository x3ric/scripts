#!/usr/bin/env python3
# Grep Wrapper
import os
import re
import sys
import signal
import subprocess
from argparse import ArgumentParser

modes = {
    "aws-keys": {
        "pattern": r'([^A-Z0-9]|^)(AKIA|A3T|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{12,}'
    },
    "base64": {
        "pattern": r'([^A-Za-z0-9+/]|^)(eyJ|YTo|Tzo|PD[89]|aHR0cHM6L|aHR0cDo|rO0)[%a-zA-Z0-9+/]*={0,2}'
    },
    "cors": {
        "pattern": r'Access-Control-Allow-'
    },
    "debug-pages": {
        "pattern": r'(Application-Trace|Routing Error|DEBUG\"? ?[=:] ?True|Caused by:|stack trace:|Microsoft \.NET Framework|Traceback|\d+:in `|#!/us|WebApplicationException|java\.lang\.|phpinfo|swaggerUi|on line \d+|SQLSTATE)'
    },
    "firebase": {
        "pattern": r'firebaseio\.com'
    },
    "fw": {
        "pattern": r'(django|laravel|symfony|graphite|grafana|X-Drupal-Cache|struts|code ?igniter|cake ?php|grails|elastic ?search|kibana|log ?stash|tomcat|jenkins|hudson|com\.atlassian\.jira|Apache Subversion|Chef Server|RabbitMQ Management|Mongo|Travis CI - Enterprise|BMC Remedy|artifactory)'
    },
    "go-functions": {
        "pattern": r'func [a-z0-9_]+\('
    },
    "http-auth": {
        "pattern": r'[a-z0-9_/\.:-]+@[a-z0-9-]+\.[a-z0-9.-]+'
    },
    "ip": {
        "pattern": r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'
    },
    "json-sec": {
        "pattern": r'(?:"|&quot;|%22)[a-z0-9_-]*(api[_-]?key|S3|aws_|secret|passw|auth)[a-z0-9_-]*(?:"|&quot;|%22): ?(?:"|&quot;|%22)[^"&]+(?:"|&quot;|%22)'
    },
    "meg-headers": {
        "pattern": r'^< [a-z0-9_\-]+: .*'
    },
    "php-curl": {
        "pattern": r'CURLOPT_(HTTPHEADER|HEADER|COOKIE|RANGE|REFERER|USERAGENT|PROXYHEADER)'
    },
    "php-errors": {
        "pattern": r'(php warning|php error|fatal error|uncaught exception|include_path|undefined index|undefined variable|\?php|<\?[^x]|stack trace:|expects parameter \d+|Debug Trace)'
    },
    "php-serialized": {
        "pattern": r'(a:\d+:{|O:\d+:"|s:\d+":")'
    },
    "php-sinks": {
        "pattern": r'[^a-z0-9_](system|exec|popen|pcntl_exec|eval|create_function|unserialize|file_exists|md5_file|filemtime|filesize|assert) ?\('
    },
    "php-sources": {
        "pattern": r'(\$_(POST|GET|COOKIE|REQUEST|SERVER|FILES)|php://(input|stdin))'
    },
    "s3-bucket": {
        "pattern": r'([a-z0-9.-]+\.s3\.amazonaws\.com|[a-z0-9.-]+\.s3-[a-z0-9-]+\.amazonaws\.com|[a-z0-9.-]+\.s3-website[.-](eu|ap|us|ca|sa|cn)|//s3\.amazonaws\.com/[a-z0-9._-]+|//s3-[a-z0-9-]+\.amazonaws\.com/[a-z0-9._-]+)'
    },
    "sec": {
        "pattern": r'([a-z0-9.-]+\.s3\.amazonaws\.com|[a-z0-9.-]+\.s3-[a-z0-9-]+\.amazonaws\.com|[a-z0-9.-]+\.s3-website[.-](eu|ap|us|ca|sa|cn)|//s3\.amazonaws\.com/[a-z0-9._-]+|//s3-[a-z0-9-]+\.amazonaws\.com/[a-z0-9._-]+)'
    },
    "servers": {
        "pattern": r'server: '
    },
    "strings": {
        "pattern": r'("[^"]+"|\'[^\']+\')'
    },
    "takeovers": {
        "pattern": r'(There is no app configured at that hostname|NoSuchBucket|No Such Account|You\'re Almost There|a GitHub Pages site here|There\'s nothing here|project not found|Your CNAME settings|InvalidBucketName|PermanentRedirect|The specified bucket does not exist|Repository not found|Sorry, We Couldn\'t Find That Page|The feed has not been found.|The thing you were looking for is no longer here, or never was|Please renew your subscription|There isn\'t a Github Pages site here.|We could not find what you\'re looking for.|No settings were found for this company:|No such app|is not a registered InCloud YouTrack|Unrecognized domain|project not found|This UserVoice subdomain is currently available!|Do you want to register|Help Center Closed)'
    },
    "upload-fields": {
        "pattern": r'<input[^>]+type=["\']?file["\']?'
    },
    "urls": {
        "pattern": r'https?://[^"\'> ]+'
    },
    "truffle": {
        "flags": "-HnriE",
        "pattern": r'(xox[p|b|o|a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})|' \
                   r'(-----BEGIN (RSA|DSA|EC|PGP) PRIVATE KEY-----)|' \
                   r'(AKIA[0-9A-Z]{16})|' \
                   r'(amzn\.mws\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})|' \
                   r'(EAACEdEose0cBA[0-9A-Za-z]+)|' \
                   r'([f|F][a|A][c|C][e|E][b|B][o|O][o|O][k|K].*[\'|\"][0-9a-f]{32}[\'|\"])|' \
                   r'([g|G][i|I][t|T][h|H][u|U][b|B].*[\'|\"][0-9a-zA-Z]{35,40}[\'|\"])|' \
                   r'([a|A][p|P][i|I][_]?key.*[\'|\"][0-9a-zA-Z]{32,45}[\'|\"])|' \
                   r'(AIza[0-9A-Za-z\-_]{35})|' \
                   r'([0-9]+-[0-9A-Za-z_]{32}\.apps\.googleusercontent\.com)|' \
                   r'(\"type\": \"service_account\")|' \
                   r'(heroku.*[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12})|' \
                   r'(sk_live_[0-9a-z]{32})|' \
                   r'(hooks\.slack\.com\/services\/T[a-zA-Z0-9_]{8}\/B[a-zA-Z0-9_]{8}\/[a-zA-Z0-9_]{24})|' \
                   r'(sq0atp-[0-9A-Za-z\-_]{22})|' \
                   r'(sq0csp-[0-9A-Za-z\-_]{43})|' \
                   r'(key-[0-9a-zA-Z]{32})|' \
                   r'(access_token\$production\$[0-9a-z]{16}\$[0-9a-f]{32})|' \
                   r'(twitter.*[1-9][0-9]+-[0-9a-zA-Z]{40})|' \
                   r'(twitter.*[\'|\"][0-9a-zA-Z]{35,44}[\'|\"])'
    }
}

def signal_handler(sig, frame):
    print("\nProcess interrupted. Exiting gracefully...")
    sys.exit(0)

def grep_mode(pattern, content):
    return re.findall(pattern, content)

def search_in_file(mode, file):
    try:
        with open(file, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
        matches = grep_mode(mode['pattern'], content)
        if matches:
            for match in matches:
                print(f"{file}: {match}")
    except Exception as e:
        print(f"Error reading {file}: {e}")

def search_in_directory(mode, directory):
    for root, _, files in os.walk(directory):
        for file in files:
            full_path = os.path.join(root, file)
            search_in_file(mode, full_path)

def list_modes():
    print("Available modes:")
    for mode in modes:
        print(f"- {mode}")

def grep_with_flags(mode, path):
    flags = mode['flags']
    pattern = mode['pattern']
    try:
        subprocess.run(f'grep {flags} "{pattern}" {path}', shell=True, check=True)
    except subprocess.CalledProcessError:
        pass

def main():
    parser = ArgumentParser(description="Grep wrapper with predefined modes.")
    parser.add_argument("mode", nargs="?", help="The grep mode to use (e.g., aws-keys, base64, etc.)")
    parser.add_argument("path", nargs="?", default=".", help="File or directory to search (default: current directory)")
    parser.add_argument("--list", action="store_true", help="List all available modes")
    args = parser.parse_args()
    if args.list:
        list_modes()
        sys.exit(0)
    if args.mode is None:
        print("Error: No mode provided. Use --list to view available modes.")
        sys.exit(1)
    if args.mode not in modes:
        print(f"Invalid mode: {args.mode}")
        list_modes()
        sys.exit(1)
    mode = modes[args.mode]
    if os.path.isdir(args.path):
        search_in_directory(mode, args.path)
    elif os.path.isfile(args.path):
        search_in_file(mode, args.path)
    else:
        print(f"Error: {args.path} is neither a file nor a directory")
        sys.exit(1)

if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    try:
        main()
    except KeyboardInterrupt:
        print("\nProcess interrupted by user.")
        sys.exit(0)
