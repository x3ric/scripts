#!/usr/bin/env python3
# SSH honeypot using paramiko
import socket
import sys
import threading
import paramiko
import os
SSH_PORT = 2121
LOGFILE = 'log.txt'
LOGFILE_LOCK = threading.Lock()
def generate_ssh_keys():
    if not os.path.exists('server.key') or not os.path.exists('server.key.pub'):
        try:
            key = paramiko.RSAKey.generate(2048)
            key.write_private_key_file('server.key')
            with open('server.key.pub', 'w') as pubkey_file:
                pubkey_file.write(f'{key.get_name()} {key.get_base64()} generated by sshpot')
            print("SSH keys generated successfully.")
        except Exception as e:
            print("Failed to generate SSH keys:", e)
class SSHServerHandler(paramiko.ServerInterface):
    def __init__(self, transport):
        self.transport = transport
        self.event = threading.Event()
    def check_auth_password(self, username, password):
        client_ip = self.transport.getpeername()[0] if hasattr(self.transport, 'getpeername') else 'Unknown'
        client_port = self.transport.getpeername()[1] if hasattr(self.transport, 'getpeername') else 'Unknown'
        LOGFILE_LOCK.acquire()
        try:
            with open(LOGFILE, "a") as logfile_handle:
                log_message = f"{client_ip} {username}:{password}"
                print(log_message)
                logfile_handle.write(log_message+"\n")
        finally:
            LOGFILE_LOCK.release()
        return paramiko.AUTH_FAILED
    def get_allowed_auths(self, username):
        return 'password'
def handleConnection(client):
    try:
        server_handler = SSHServerHandler(client)
        transport = paramiko.Transport(client)
        transport.load_server_moduli()
        transport.add_server_key(paramiko.RSAKey(filename='server.key'))
        transport.local_version = "SSH-2.0-OpenSSH_9.2p1-Debian-2+deb12u2"
        transport.start_server(server=server_handler)
        channel = transport.accept(1)
        if not channel is None:
            channel.close()
    except Exception as e:
        print("ERROR: Failed to handle connection")
        print(e)
def main():
    try:
        generate_ssh_keys()
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind(('', SSH_PORT))
        server_socket.listen(100)
        print(f'[SSH] listening on port {SSH_PORT}.')
        while True:
            try:
                client_socket, _ = server_socket.accept()
                threading.Thread(target=handleConnection, args=(client_socket,)).start()
            except Exception as e:
                print("ERROR: Client handling")
                print(e)
    except Exception as e:
        print("ERROR: Failed to create socket")
        print(e)
        sys.exit(1)
    except KeyboardInterrupt:
        print()
        sys.exit(1)
if __name__ == '__main__':
    main()
